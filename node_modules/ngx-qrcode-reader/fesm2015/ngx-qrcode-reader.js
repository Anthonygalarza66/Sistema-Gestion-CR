import { ɵɵdefineInjectable, Injectable, EventEmitter, Component, Renderer2, Input, ViewChild, Output, NgModule } from '@angular/core';

class NgxQrcodeReaderService {
    constructor() { }
}
NgxQrcodeReaderService.ɵprov = ɵɵdefineInjectable({ factory: function NgxQrcodeReaderService_Factory() { return new NgxQrcodeReaderService(); }, token: NgxQrcodeReaderService, providedIn: "root" });
NgxQrcodeReaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgxQrcodeReaderService.ctorParameters = () => [];

var QrCode = require('qrcode-reader').default;
class NgxQrcodeReaderComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.cssClass = 'qrcode-reader';
        this.showQRCode = true;
        this.fileValue = '';
        this.qrContentResult = new EventEmitter();
        this.qrReader = new QrCode();
    }
    ngOnInit() {
        let that = this;
        this.qrReader.callback = (error, result) => {
            if (error) {
                that.qrContentResult.emit({ error: error });
                console.error(error);
                return;
            }
            that.qrContentResult.emit({ content: result.result, type: "text" });
        };
    }
    ngOnChanges() {
        this.decode(this.fileValue);
        if (this.showQRCode) {
            this.render();
        }
    }
    decode(value) {
        this.qrReader.decode(value);
    }
    render() {
        let element;
        element = this.renderer.createElement('img');
        element.setAttribute("src", this.fileValue);
        this.renderElement(element);
    }
    renderElement(element) {
        for (let node of this.qrCodeElement.nativeElement.childNodes) {
            this.renderer.removeChild(this.qrCodeElement.nativeElement, node);
        }
        this.renderer.appendChild(this.qrCodeElement.nativeElement, element);
    }
}
NgxQrcodeReaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-qrcode-reader',
                template: `<div #qrCodeElement [class]="cssClass"></div>`
            },] }
];
NgxQrcodeReaderComponent.ctorParameters = () => [
    { type: Renderer2 }
];
NgxQrcodeReaderComponent.propDecorators = {
    cssClass: [{ type: Input, args: ['qrClass',] }],
    showQRCode: [{ type: Input, args: ["showQr",] }],
    fileValue: [{ type: Input, args: ['qrFile',] }],
    qrCodeElement: [{ type: ViewChild, args: ['qrCodeElement', { static: true },] }],
    qrContentResult: [{ type: Output, args: ['onfetchQRContent',] }]
};

class NgxQrcodeReaderModule {
}
NgxQrcodeReaderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NgxQrcodeReaderComponent
                ],
                imports: [],
                exports: [
                    NgxQrcodeReaderComponent
                ]
            },] }
];

/*
 * Public API Surface of ngx-qrcode-reader
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxQrcodeReaderComponent, NgxQrcodeReaderModule, NgxQrcodeReaderService };
//# sourceMappingURL=ngx-qrcode-reader.js.map
