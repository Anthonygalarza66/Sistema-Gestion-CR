import { Component, Input, Output, EventEmitter, ViewChild, Renderer2 } from '@angular/core';
var QrCode = require('qrcode-reader').default;
export class NgxQrcodeReaderComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.cssClass = 'qrcode-reader';
        this.showQRCode = true;
        this.fileValue = '';
        this.qrContentResult = new EventEmitter();
        this.qrReader = new QrCode();
    }
    ngOnInit() {
        let that = this;
        this.qrReader.callback = (error, result) => {
            if (error) {
                that.qrContentResult.emit({ error: error });
                console.error(error);
                return;
            }
            that.qrContentResult.emit({ content: result.result, type: "text" });
        };
    }
    ngOnChanges() {
        this.decode(this.fileValue);
        if (this.showQRCode) {
            this.render();
        }
    }
    decode(value) {
        this.qrReader.decode(value);
    }
    render() {
        let element;
        element = this.renderer.createElement('img');
        element.setAttribute("src", this.fileValue);
        this.renderElement(element);
    }
    renderElement(element) {
        for (let node of this.qrCodeElement.nativeElement.childNodes) {
            this.renderer.removeChild(this.qrCodeElement.nativeElement, node);
        }
        this.renderer.appendChild(this.qrCodeElement.nativeElement, element);
    }
}
NgxQrcodeReaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-qrcode-reader',
                template: `<div #qrCodeElement [class]="cssClass"></div>`
            },] }
];
NgxQrcodeReaderComponent.ctorParameters = () => [
    { type: Renderer2 }
];
NgxQrcodeReaderComponent.propDecorators = {
    cssClass: [{ type: Input, args: ['qrClass',] }],
    showQRCode: [{ type: Input, args: ["showQr",] }],
    fileValue: [{ type: Input, args: ['qrFile',] }],
    qrCodeElement: [{ type: ViewChild, args: ['qrCodeElement', { static: true },] }],
    qrContentResult: [{ type: Output, args: ['onfetchQRContent',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXFyY29kZS1yZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXFyY29kZS1yZWFkZXIvc3JjL2xpYi9uZ3gtcXJjb2RlLXJlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBcUIsU0FBUyxFQUFFLFNBQVMsRUFBYyxNQUFNLGVBQWUsQ0FBQztBQUs1SCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBTzlDLE1BQU0sT0FBTyx3QkFBd0I7SUFhbkMsWUFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVhyQixhQUFRLEdBQUcsZUFBZSxDQUFDO1FBQzVCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsY0FBUyxHQUFFLEVBQUUsQ0FBQztRQUtILG9CQUFlLEdBQUksSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUs1RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxLQUFVLEVBQUUsTUFBVyxFQUFFLEVBQUU7WUFDbkQsSUFBRyxLQUFLLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDNUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDckIsT0FBTzthQUNSO1lBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRyxJQUFJLEVBQUcsTUFBTSxFQUFHLENBQUMsQ0FBQztRQUN6RSxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVCLElBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7SUFHRCxNQUFNLENBQUMsS0FBVTtRQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxPQUFpQixDQUFFO1FBQ3ZCLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsYUFBYSxDQUFDLE9BQVk7UUFDeEIsS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUU7WUFDNUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDbkU7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RSxDQUFDOzs7WUExREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRSwrQ0FBK0M7YUFFMUQ7OztZQVg4RSxTQUFTOzs7dUJBY3JGLEtBQUssU0FBQyxTQUFTO3lCQUNmLEtBQUssU0FBQyxRQUFRO3dCQUNkLEtBQUssU0FBQyxRQUFROzRCQUVkLFNBQVMsU0FBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzhCQUczQyxNQUFNLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0ICxFdmVudEVtaXR0ZXIgLCBPbkNoYW5nZXMsT25Jbml0LCBWaWV3Q2hpbGQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbmRlY2xhcmUgdmFyIHJlcXVpcmU6IGFueTtcblxudmFyIFFyQ29kZSA9IHJlcXVpcmUoJ3FyY29kZS1yZWFkZXInKS5kZWZhdWx0O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtcXJjb2RlLXJlYWRlcicsXG4gIHRlbXBsYXRlOiBgPGRpdiAjcXJDb2RlRWxlbWVudCBbY2xhc3NdPVwiY3NzQ2xhc3NcIj48L2Rpdj5gLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE5neFFyY29kZVJlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyAsIE9uSW5pdCB7XG5cbiAgQElucHV0KCdxckNsYXNzJykgY3NzQ2xhc3MgPSAncXJjb2RlLXJlYWRlcic7IFxuICBASW5wdXQoXCJzaG93UXJcIikgc2hvd1FSQ29kZSA9IHRydWU7XG4gIEBJbnB1dCgncXJGaWxlJykgZmlsZVZhbHVlID0nJztcbiAgXG4gIEBWaWV3Q2hpbGQoJ3FyQ29kZUVsZW1lbnQnLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBxckNvZGVFbGVtZW50ITogRWxlbWVudFJlZjtcblxuICBAT3V0cHV0KCdvbmZldGNoUVJDb250ZW50JykgcXJDb250ZW50UmVzdWx0ICA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBxclJlYWRlcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikgeyBcbiAgICAgICAgdGhpcy5xclJlYWRlciA9IG5ldyBRckNvZGUoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCl7XG4gICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgIHRoaXMucXJSZWFkZXIuY2FsbGJhY2sgPSAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgIGlmKGVycm9yKSB7XG4gICAgICAgIHRoYXQucXJDb250ZW50UmVzdWx0LmVtaXQoe2Vycm9yIDogZXJyb3IgfSk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGF0LnFyQ29udGVudFJlc3VsdC5lbWl0KHtjb250ZW50IDogcmVzdWx0LnJlc3VsdCAsIHR5cGUgOiBcInRleHRcIiAgfSk7XG4gICAgfSBcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuZGVjb2RlKHRoaXMuZmlsZVZhbHVlKTtcbiAgICBpZih0aGlzLnNob3dRUkNvZGUpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cblxuICBkZWNvZGUodmFsdWU6IGFueSl7XG4gICAgdGhpcy5xclJlYWRlci5kZWNvZGUodmFsdWUpOyAgICBcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIGxldCBlbGVtZW50IDogRWxlbWVudCA7XG4gICAgZWxlbWVudCA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzcmNcIix0aGlzLmZpbGVWYWx1ZSk7XG4gICAgdGhpcy5yZW5kZXJFbGVtZW50KGVsZW1lbnQpO1xuICB9XG4gIFxuICByZW5kZXJFbGVtZW50KGVsZW1lbnQ6IGFueSl7XG4gICAgZm9yIChsZXQgbm9kZSBvZiB0aGlzLnFyQ29kZUVsZW1lbnQubmF0aXZlRWxlbWVudC5jaGlsZE5vZGVzKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKHRoaXMucXJDb2RlRWxlbWVudC5uYXRpdmVFbGVtZW50LCBub2RlKTtcbiAgICB9ICAgICAgICAgICAgXG4gICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLnFyQ29kZUVsZW1lbnQubmF0aXZlRWxlbWVudCwgZWxlbWVudCk7XG4gIH1cbn1cbiJdfQ==